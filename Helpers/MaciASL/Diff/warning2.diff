diff --git a/MaciASL/AppDelegate.m b/MaciASL/AppDelegate.m
index 411b67f..407052e 100644
--- a/MaciASL/AppDelegate.m
+++ b/MaciASL/AppDelegate.m
@@ -233,8 +233,6 @@
 
 -(void)scrollRangeToVisible:(NSRange)range{
     [super scrollRangeToVisible:range];
-    if (!NSEqualRanges(range, self.selectedRange) && [[[NSTextFinder class] performSelector:@selector(_globalTextFinder)] client] == (id)self && [self.delegate respondsToSelector:@selector(textViewDidShowFindIndicator:)])
-        [self.delegate performSelector:@selector(textViewDidShowFindIndicator:) withObject:[NSNotification notificationWithName:@"NSTextViewDidShowFindIndicatorNotification" object:self userInfo:@{@"NSFindIndicatorRange":[NSValue valueWithRange:range]}]];
 }
 
 @end
diff --git a/MaciASL/Colorize.m b/MaciASL/Colorize.m
index e4481c1..1fb0766 100644
--- a/MaciASL/Colorize.m
+++ b/MaciASL/Colorize.m
@@ -91,28 +91,28 @@ static NSDictionary *themes;
     NSRange range = [mgr characterRangeForGlyphRange:[mgr glyphRangeForBoundingRect:view.visibleRect inTextContainer:view.textContainer] actualGlyphRange:nil];
     [mgr removeTemporaryAttribute:NSForegroundColorAttributeName forCharacterRange:range];
     [regNumber enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.number forCharacterRange:[result rangeAtIndex:1]];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.number forCharacterRange:[result rangeAtIndex:1]];
     }];
     [regPredefined enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.predefined forCharacterRange:[result rangeAtIndex:1]];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.predefined forCharacterRange:[result rangeAtIndex:1]];
     }];
     [regKeywords enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.keyword forCharacterRange:[result rangeAtIndex:1]];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.keyword forCharacterRange:[result rangeAtIndex:1]];
     }];
     [regResources enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.resource forCharacterRange:[result rangeAtIndex:1]];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.resource forCharacterRange:[result rangeAtIndex:1]];
     }];
     [regOperator enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.operator forCharacterRange:[result rangeAtIndex:1]];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.operator forCharacterRange:[result rangeAtIndex:1]];
     }];
     [regOpNoArg enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.opNoArg forCharacterRange:[result rangeAtIndex:1]];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.opNoArg forCharacterRange:[result rangeAtIndex:1]];
     }];
     [regString enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.string forCharacterRange:result.range];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.string forCharacterRange:result.range];
     }];
     [regComment enumerateMatchesInString:mgr.attributedString.string options:0 range:range usingBlock:^void(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop){
-        [mgr addTemporaryAttribute:NSForegroundColorAttributeName value:theme.comment forCharacterRange:result.range];
+        [self->mgr addTemporaryAttribute:NSForegroundColorAttributeName value:self->theme.comment forCharacterRange:result.range];
     }];
     NSUInteger open = [mgr.attributedString.string rangeOfString:@"/*" options:0 range:range].location, close = [mgr.attributedString.string rangeOfString:@"*/" options:0 range:range].location;
     if (open == close) return;
diff --git a/MaciASL/Patch.m b/MaciASL/Patch.m
index a2a5255..826695a 100644
--- a/MaciASL/Patch.m
+++ b/MaciASL/Patch.m
@@ -59,7 +59,7 @@
     }
     AsynchB(url.standardizedURL, ^(NSString *response) {
         self.patch = response;
-        [window makeFirstResponder:patchView];
+        [self->window makeFirstResponder:self->patchView];
     }, SourceList.sharedList.queue);
     [sender deselectAll:sender];
 }
@@ -478,7 +478,7 @@ static NSRegularExpression *hid;
             __block NSMutableArray *results = [NSMutableArray array];
             [reg enumerateMatchesInString:text options:0 range:[node contentRange:text] usingBlock:^void(NSTextCheckingResult *check, NSMatchingFlags flags, BOOL *stop){
                 if (![node isSelf:check.range]) return;
-                [results addObject:[PatchDelta create:check.range withReplacement:(patch.action == remove_matched || patch.action == removeall_matched)?@"":[reg replacementStringForResult:check inString:text offset:0 template:[patch argAsTemplate:eight nine:nine]]]];
+                [results addObject:[PatchDelta create:check.range withReplacement:(patch.action == remove_matched || patch.action == removeall_matched)?@"":[reg replacementStringForResult:check inString:self->text offset:0 template:[patch argAsTemplate:self->eight nine:self->nine]]]];
                 if (patch.action == replace_matched || patch.action == remove_matched)
                     *stop = true;
             }];
diff --git a/MaciASL/SSDT.m b/MaciASL/SSDT.m
index cce0b42..762cdd0 100644
--- a/MaciASL/SSDT.m
+++ b/MaciASL/SSDT.m
@@ -64,7 +64,7 @@ static SSDTGen *sharedSSDT;
     }
     AsynchB(url.standardizedURL, ^(NSString *response) {
         self.generator = response;
-        [window makeFirstResponder:generatorView];
+        [self->window makeFirstResponder:self->generatorView];
     }, SourceList.sharedList.queue);
     [sender deselectAll:sender];
 }
diff --git a/MaciASL/Source.m b/MaciASL/Source.m
index bfa92a7..8bc9d53 100644
--- a/MaciASL/Source.m
+++ b/MaciASL/Source.m
@@ -113,8 +113,8 @@ void ReachabilityDidChange(SCNetworkReachabilityRef target, SCNetworkReachabilit
                 }
                 if (dsdt.count + ssdt.count == 0) return;
                 SourceProvider *temp = [SourceProvider create:name withURL:realURL andChildren:@{@"DSDT":[dsdt copy], @"SSDT":[ssdt copy]}];
-                [archive setObject:temp forKey:url];
-                muteWithNotice(self, providers, [providers addObject:temp])
+                [self->archive setObject:temp forKey:url];
+                muteWithNotice(self, providers, [self->providers addObject:temp])
             }, _queue);
         }
         else if (![oldNames containsObject:[provider objectForKey:@"name"]]) {
